//
//  JapanMap.swift
//  ProjectName
//
//  Created by AuthorName on 2020/08/07.
//  Copyright Â© 2020 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//

import UIKit

public class JapanMap {
    public func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 560, height: 700), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 560, height: 700), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 560, y: resizedFrame.height / 700)
        
        //// Color Declarations
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        
        //// A Blank Map of Japan Group
        //// OKINAWA Drawing
        strokeColor.setStroke()
        Prefecture.okinawa.path.lineWidth = 0.5
        Prefecture.okinawa.path.miterLimit = 4
        Prefecture.okinawa.path.stroke()
        
        //// NAGASAKI Drawing
        strokeColor.setStroke()
        Prefecture.nagasaki.path.lineWidth = 0.5
        Prefecture.nagasaki.path.miterLimit = 4
        Prefecture.nagasaki.path.stroke()
        
        //// FUKUOKA Drawing
        strokeColor.setStroke()
        Prefecture.fukuoka.path.lineWidth = 0.5
        Prefecture.fukuoka.path.miterLimit = 4
        Prefecture.fukuoka.path.stroke()
        
        //// SAGA Drawing
        strokeColor.setStroke()
        Prefecture.saga.path.lineWidth = 0.5
        Prefecture.saga.path.miterLimit = 4
        Prefecture.saga.path.stroke()
        
        //// KUMAMOTO Drawing
        strokeColor.setStroke()
        Prefecture.kumamoto.path.lineWidth = 0.5
        Prefecture.kumamoto.path.miterLimit = 4
        Prefecture.kumamoto.path.stroke()
        
        //// KAGOSHIMA Drawing
        strokeColor.setStroke()
        Prefecture.kagoshima.path.lineWidth = 0.5
        Prefecture.kagoshima.path.miterLimit = 4
        Prefecture.kagoshima.path.stroke()
        
        //// MIYAZAKI Drawing
        strokeColor.setStroke()
        Prefecture.miyazaki.path.lineWidth = 0.5
        Prefecture.miyazaki.path.miterLimit = 4
        Prefecture.miyazaki.path.stroke()
        
        //// OOITA Drawing
        strokeColor.setStroke()
        Prefecture.oita.path.lineWidth = 0.5
        Prefecture.oita.path.miterLimit = 4
        Prefecture.oita.path.stroke()
        
        //// EHIME Drawing
        strokeColor.setStroke()
        Prefecture.ehime.path.lineWidth = 0.5
        Prefecture.ehime.path.miterLimit = 4
        Prefecture.ehime.path.stroke()
        
        //// KOUCHI Drawing
        strokeColor.setStroke()
        Prefecture.kochi.path.lineWidth = 0.5
        Prefecture.kochi.path.miterLimit = 4
        Prefecture.kochi.path.stroke()
        
        //// TOKUSHIMA Drawing
        strokeColor.setStroke()
        Prefecture.tokushima.path.lineWidth = 0.5
        Prefecture.tokushima.path.miterLimit = 4
        Prefecture.tokushima.path.stroke()
        
        //// KAGAWA Drawing
        strokeColor.setStroke()
        Prefecture.kagawa.path.lineWidth = 0.5
        Prefecture.kagawa.path.miterLimit = 4
        Prefecture.kagawa.path.stroke()
        
        //// YAMAGUCHI Drawing
        strokeColor.setStroke()
        Prefecture.yamaguchi.path.lineWidth = 0.5
        Prefecture.yamaguchi.path.miterLimit = 4
        Prefecture.yamaguchi.path.stroke()
        
        //// HIROSHIMA Drawing
        strokeColor.setStroke()
        Prefecture.hiroshima.path.lineWidth = 0.5
        Prefecture.hiroshima.path.miterLimit = 4
        Prefecture.hiroshima.path.stroke()
        
        //// OKAYAMA Drawing
        strokeColor.setStroke()
        Prefecture.okayama.path.lineWidth = 0.5
        Prefecture.okayama.path.miterLimit = 4
        Prefecture.okayama.path.stroke()
        
        //// TOTTORI Drawing
        strokeColor.setStroke()
        Prefecture.tottori.path.lineWidth = 0.5
        Prefecture.tottori.path.miterLimit = 4
        Prefecture.tottori.path.stroke()
        
        //// SHIMANE Drawing
        strokeColor.setStroke()
        Prefecture.shimane.path.lineWidth = 0.5
        Prefecture.shimane.path.miterLimit = 4
        Prefecture.shimane.path.stroke()
        
        //// HYOGO Drawing
        strokeColor.setStroke()
        Prefecture.hyogo.path.lineWidth = 0.5
        Prefecture.hyogo.path.miterLimit = 4
        Prefecture.hyogo.path.stroke()
        
        //// KYOTO Drawing
        strokeColor.setStroke()
        Prefecture.kyoto.path.lineWidth = 0.5
        Prefecture.kyoto.path.miterLimit = 4
        Prefecture.kyoto.path.stroke()
        
        //// OSAKA Drawing
        strokeColor.setStroke()
        Prefecture.osaka.path.lineWidth = 0.5
        Prefecture.osaka.path.miterLimit = 4
        Prefecture.osaka.path.stroke()
        
        //// WAKAYAMA Drawing
        strokeColor.setStroke()
        Prefecture.wakayama.path.lineWidth = 0.5
        Prefecture.wakayama.path.miterLimit = 4
        Prefecture.wakayama.path.stroke()
        
        //// NARA Drawing
        strokeColor.setStroke()
        Prefecture.nara.path.lineWidth = 0.5
        Prefecture.nara.path.miterLimit = 4
        Prefecture.nara.path.stroke()
        
        //// SHIGA Drawing
        strokeColor.setStroke()
        Prefecture.shiga.path.lineWidth = 0.5
        Prefecture.shiga.path.miterLimit = 4
        Prefecture.shiga.path.stroke()
        
        //// MIE Drawing
        strokeColor.setStroke()
        Prefecture.mie.path.lineWidth = 0.5
        Prefecture.mie.path.miterLimit = 4
        Prefecture.mie.path.stroke()
        
        //// HUKUI Drawing
        strokeColor.setStroke()
        Prefecture.fukui.path.lineWidth = 0.5
        Prefecture.fukui.path.miterLimit = 4
        Prefecture.fukui.path.stroke()
        
        //// ISHIKAWA Drawing
        strokeColor.setStroke()
        Prefecture.ishikawa.path.lineWidth = 0.5
        Prefecture.ishikawa.path.miterLimit = 4
        Prefecture.ishikawa.path.stroke()
        
        //// TOYAMA Drawing
        strokeColor.setStroke()
        Prefecture.toyama.path.lineWidth = 0.5
        Prefecture.toyama.path.miterLimit = 4
        Prefecture.toyama.path.stroke()
        
        //// GUFU Drawing
        strokeColor.setStroke()
        Prefecture.gufu.path.lineWidth = 0.5
        Prefecture.gufu.path.miterLimit = 4
        Prefecture.gufu.path.stroke()
        
        //// AICHI Drawing
        strokeColor.setStroke()
        Prefecture.aichi.path.lineWidth = 0.5
        Prefecture.aichi.path.miterLimit = 4
        Prefecture.aichi.path.stroke()
        
        //// NAGANO Drawing
        strokeColor.setStroke()
        Prefecture.nagano.path.lineWidth = 0.5
        Prefecture.nagano.path.miterLimit = 4
        Prefecture.nagano.path.stroke()
        
        //// SIZUOKA Drawing
        strokeColor.setStroke()
        Prefecture.shizuoka.path.lineWidth = 0.5
        Prefecture.shizuoka.path.miterLimit = 4
        Prefecture.shizuoka.path.stroke()
        
        //// NIIGATA Drawing
        strokeColor.setStroke()
        Prefecture.niigata.path.lineWidth = 0.5
        Prefecture.niigata.path.miterLimit = 4
        Prefecture.niigata.path.stroke()
        
        //// YAMANASHI Drawing
        strokeColor.setStroke()
        Prefecture.yamanashi.path.lineWidth = 0.5
        Prefecture.yamanashi.path.miterLimit = 4
        Prefecture.yamanashi.path.stroke()
        
        //// KANAGAWA Drawing
        strokeColor.setStroke()
        Prefecture.kanagawa.path.lineWidth = 0.5
        Prefecture.kanagawa.path.miterLimit = 4
        Prefecture.kanagawa.path.stroke()
        
        //// TOKYO Drawing
        strokeColor.setStroke()
        Prefecture.tokyo.path.lineWidth = 0.5
        Prefecture.tokyo.path.miterLimit = 4
        Prefecture.tokyo.path.stroke()
        
        //// SAITAMA Drawing
        strokeColor.setStroke()
        Prefecture.saitama.path.lineWidth = 0.5
        Prefecture.saitama.path.miterLimit = 4
        Prefecture.saitama.path.stroke()
        
        //// GUNMA Drawing
        strokeColor.setStroke()
        Prefecture.gunma.path.lineWidth = 0.5
        Prefecture.gunma.path.miterLimit = 4
        Prefecture.gunma.path.stroke()
        
        //// TOCHIGI Drawing
        strokeColor.setStroke()
        Prefecture.tochigi.path.lineWidth = 0.5
        Prefecture.tochigi.path.miterLimit = 4
        Prefecture.tochigi.path.stroke()
        
        //// CHIBA Drawing
        strokeColor.setStroke()
        Prefecture.chiba.path.lineWidth = 0.5
        Prefecture.chiba.path.miterLimit = 4
        Prefecture.chiba.path.stroke()
        
        //// IBARAKI Drawing
        strokeColor.setStroke()
        Prefecture.ibaraki.path.lineWidth = 0.5
        Prefecture.ibaraki.path.miterLimit = 4
        Prefecture.ibaraki.path.stroke()
        
        //// FUKUSHIMA Drawing
        strokeColor.setStroke()
        Prefecture.fukushima.path.lineWidth = 0.5
        Prefecture.fukushima.path.miterLimit = 4
        Prefecture.fukushima.path.stroke()
        
        //// MIYAGI Drawing
        strokeColor.setStroke()
        Prefecture.miyagi.path.lineWidth = 0.5
        Prefecture.miyagi.path.miterLimit = 4
        Prefecture.miyagi.path.stroke()
        
        //// YAMAGATA Drawing
        strokeColor.setStroke()
        Prefecture.yamagata.path.lineWidth = 0.5
        Prefecture.yamagata.path.miterLimit = 4
        Prefecture.yamagata.path.stroke()
        
        //// IWATE Drawing
        strokeColor.setStroke()
        Prefecture.iwate.path.lineWidth = 0.5
        Prefecture.iwate.path.miterLimit = 4
        Prefecture.iwate.path.stroke()
        
        //// AKITA Drawing
        strokeColor.setStroke()
        Prefecture.akita.path.lineWidth = 0.5
        Prefecture.akita.path.miterLimit = 4
        Prefecture.akita.path.stroke()
        
        //// AOMORI Drawing
        strokeColor.setStroke()
        Prefecture.aomori.path.lineWidth = 0.5
        Prefecture.aomori.path.miterLimit = 4
        Prefecture.aomori.path.stroke()
        
        //// HOKKAIDO Drawing
        strokeColor.setStroke()
        Prefecture.hokkaido.path.lineWidth = 0.5
        Prefecture.hokkaido.path.miterLimit = 4
        Prefecture.hokkaido.path.stroke()
        
        //// TOKYO(ISLANDS) Drawing
        strokeColor.setStroke()
        Prefecture.ogasawara.path.lineWidth = 0.5
        Prefecture.ogasawara.path.miterLimit = 4
        Prefecture.ogasawara.path.stroke()
        
        context.restoreGState()
    }
    
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
